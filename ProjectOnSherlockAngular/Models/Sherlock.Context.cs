//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProjectOnSherlockAngular.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SatabdiEntities : DbContext
    {
        public SatabdiEntities()
            : base("name=SatabdiEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ASULead> ASULeads { get; set; }
        public virtual DbSet<BuyerMaster> BuyerMasters { get; set; }
        public virtual DbSet<BuyerProductSchedule> BuyerProductSchedules { get; set; }
        public virtual DbSet<CommonLead> CommonLeads { get; set; }
        public virtual DbSet<CorporateHealthLead> CorporateHealthLeads { get; set; }
        public virtual DbSet<DebtLead> DebtLeads { get; set; }
        public virtual DbSet<EquityReleaseLead> EquityReleaseLeads { get; set; }
        public virtual DbSet<HealthLead> HealthLeads { get; set; }
        public virtual DbSet<LeadStatusByName> LeadStatusByNames { get; set; }
        public virtual DbSet<LifeLead> LifeLeads { get; set; }
        public virtual DbSet<LoanLead> LoanLeads { get; set; }
        public virtual DbSet<MortgageLead> MortgageLeads { get; set; }
        public virtual DbSet<OrganizationMaster> OrganizationMasters { get; set; }
        public virtual DbSet<PensionLead> PensionLeads { get; set; }
        public virtual DbSet<PrepaidFuneralLead> PrepaidFuneralLeads { get; set; }
        public virtual DbSet<ProductMaster> ProductMasters { get; set; }
        public virtual DbSet<ProductSlab> ProductSlabs { get; set; }
        public virtual DbSet<TransferLog> TransferLogs { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<WebsiteMaster> WebsiteMasters { get; set; }
        public virtual DbSet<ILDS_SEARCH_DASHBOARD_ALLDATA> ILDS_SEARCH_DASHBOARD_ALLDATA { get; set; }
    
        [DbFunction("SatabdiEntities", "Fn_GetChildProducts")]
        public virtual IQueryable<Fn_GetChildProducts_Result> Fn_GetChildProducts(Nullable<int> parenId)
        {
            var parenIdParameter = parenId.HasValue ?
                new ObjectParameter("parenId", parenId) :
                new ObjectParameter("parenId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Fn_GetChildProducts_Result>("[SatabdiEntities].[Fn_GetChildProducts](@parenId)", parenIdParameter);
        }
    
        public virtual ObjectResult<SP_LEADINFO_DATA_Result> SP_LEADINFO_DATA(Nullable<int> productid, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> trnsfrStart, Nullable<System.DateTime> trnsfrEnd, string websiteName, string leadStatus, string buyerName, string fullName, string email, string workPhone, string homePhone, Nullable<int> leadId, string sortColumnName, Nullable<int> rowsPerPage, Nullable<int> pageNumber)
        {
            var productidParameter = productid.HasValue ?
                new ObjectParameter("productid", productid) :
                new ObjectParameter("productid", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var trnsfrStartParameter = trnsfrStart.HasValue ?
                new ObjectParameter("trnsfrStart", trnsfrStart) :
                new ObjectParameter("trnsfrStart", typeof(System.DateTime));
    
            var trnsfrEndParameter = trnsfrEnd.HasValue ?
                new ObjectParameter("trnsfrEnd", trnsfrEnd) :
                new ObjectParameter("trnsfrEnd", typeof(System.DateTime));
    
            var websiteNameParameter = websiteName != null ?
                new ObjectParameter("websiteName", websiteName) :
                new ObjectParameter("websiteName", typeof(string));
    
            var leadStatusParameter = leadStatus != null ?
                new ObjectParameter("leadStatus", leadStatus) :
                new ObjectParameter("leadStatus", typeof(string));
    
            var buyerNameParameter = buyerName != null ?
                new ObjectParameter("buyerName", buyerName) :
                new ObjectParameter("buyerName", typeof(string));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("fullName", fullName) :
                new ObjectParameter("fullName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var workPhoneParameter = workPhone != null ?
                new ObjectParameter("workPhone", workPhone) :
                new ObjectParameter("workPhone", typeof(string));
    
            var homePhoneParameter = homePhone != null ?
                new ObjectParameter("homePhone", homePhone) :
                new ObjectParameter("homePhone", typeof(string));
    
            var leadIdParameter = leadId.HasValue ?
                new ObjectParameter("leadId", leadId) :
                new ObjectParameter("leadId", typeof(int));
    
            var sortColumnNameParameter = sortColumnName != null ?
                new ObjectParameter("sortColumnName", sortColumnName) :
                new ObjectParameter("sortColumnName", typeof(string));
    
            var rowsPerPageParameter = rowsPerPage.HasValue ?
                new ObjectParameter("RowsPerPage", rowsPerPage) :
                new ObjectParameter("RowsPerPage", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_LEADINFO_DATA_Result>("SP_LEADINFO_DATA", productidParameter, startDateParameter, endDateParameter, trnsfrStartParameter, trnsfrEndParameter, websiteNameParameter, leadStatusParameter, buyerNameParameter, fullNameParameter, emailParameter, workPhoneParameter, homePhoneParameter, leadIdParameter, sortColumnNameParameter, rowsPerPageParameter, pageNumberParameter);
        }
    }
}
